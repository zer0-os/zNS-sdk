/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistrarInterface extends ethers.utils.Interface {
  functions: {
    "addController(address)": FunctionFragment;
    "adminBurnToken(uint256)": FunctionFragment;
    "adminTransfer(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "beacon()": FunctionFragment;
    "controllers(address)": FunctionFragment;
    "domainController(uint256)": FunctionFragment;
    "domainExists(uint256)": FunctionFragment;
    "domainMetadataLockedBy(uint256)": FunctionFragment;
    "domainRoyaltyAmount(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "initialize(address,uint256,string,string,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "isDomainMetadataLocked(uint256)": FunctionFragment;
    "lockDomainMetadata(uint256,bool)": FunctionFragment;
    "minterOf(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "parentOf(uint256)": FunctionFragment;
    "parentRegistrar()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "records(uint256)": FunctionFragment;
    "registerDomain(uint256,string,address,string,uint256,bool)": FunctionFragment;
    "registerDomainAndSend(uint256,string,address,string,uint256,bool,address)": FunctionFragment;
    "registerSubdomainContract(uint256,string,address,string,uint256,bool,address)": FunctionFragment;
    "removeController(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rootDomainId()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAndLockDomainMetadata(uint256,string)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setDomainMetadataUri(uint256,string)": FunctionFragment;
    "setDomainRoyaltyAmount(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeFromNormalRegistrar(address)": FunctionFragment;
    "zNSHub()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminBurnToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(functionFragment: "controllers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "domainController",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainMetadataLockedBy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainRoyaltyAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDomainMetadataLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDomainMetadata",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "minterOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [BigNumberish, string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomainAndSend",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSubdomainContract",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootDomainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAndLockDomainMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDomainMetadataUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDomainRoyaltyAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeFromNormalRegistrar",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "zNSHub", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminBurnToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainMetadataLockedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainRoyaltyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDomainMetadataLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDomainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minterOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parentOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainAndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSubdomainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAndLockDomainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDomainMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDomainRoyaltyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeFromNormalRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zNSHub", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ControllerAdded(address)": EventFragment;
    "ControllerRemoved(address)": EventFragment;
    "DomainCreated(uint256,string,uint256,uint256,address,address,string,uint256)": EventFragment;
    "MetadataChanged(uint256,string)": EventFragment;
    "MetadataLockChanged(uint256,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoyaltiesAmountChanged(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataLockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesAmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Registrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistrarInterface;

  functions: {
    addController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminBurnToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    beacon(overrides?: CallOverrides): Promise<[string]>;

    controllers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    domainController(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    domainExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    domainMetadataLockedBy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    domainRoyaltyAmount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      parentRegistrar_: string,
      rootDomainId_: BigNumberish,
      collectionName: string,
      collectionSymbol: string,
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isController(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDomainMetadataLocked(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockDomainMetadata(
      id: BigNumberish,
      toLock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minterOf(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    parentRegistrar(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string, string, BigNumber, BigNumber, string] & {
        minter: string;
        metadataLocked: boolean;
        metadataLockedBy: string;
        controller: string;
        royaltyAmount: BigNumber;
        parentId: BigNumber;
        subdomainContract: string;
      }
    >;

    registerDomain(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerDomainAndSend(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerSubdomainContract(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootDomainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAndLockDomainMetadata(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDomainMetadataUri(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDomainRoyaltyAmount(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeFromNormalRegistrar(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zNSHub(overrides?: CallOverrides): Promise<[string]>;
  };

  addController(
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminBurnToken(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminTransfer(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  beacon(overrides?: CallOverrides): Promise<string>;

  controllers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  domainController(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainExists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  domainMetadataLockedBy(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainRoyaltyAmount(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    parentRegistrar_: string,
    rootDomainId_: BigNumberish,
    collectionName: string,
    collectionSymbol: string,
    zNSHub_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isController(account: string, overrides?: CallOverrides): Promise<boolean>;

  isDomainMetadataLocked(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockDomainMetadata(
    id: BigNumberish,
    toLock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minterOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  parentRegistrar(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  records(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, string, string, BigNumber, BigNumber, string] & {
      minter: string;
      metadataLocked: boolean;
      metadataLockedBy: string;
      controller: string;
      royaltyAmount: BigNumber;
      parentId: BigNumber;
      subdomainContract: string;
    }
  >;

  registerDomain(
    parentId: BigNumberish,
    label: string,
    minter: string,
    metadataUri: string,
    royaltyAmount: BigNumberish,
    locked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerDomainAndSend(
    parentId: BigNumberish,
    label: string,
    minter: string,
    metadataUri: string,
    royaltyAmount: BigNumberish,
    locked: boolean,
    sendToUser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerSubdomainContract(
    parentId: BigNumberish,
    label: string,
    minter: string,
    metadataUri: string,
    royaltyAmount: BigNumberish,
    locked: boolean,
    sendToUser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeController(
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootDomainId(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAndLockDomainMetadata(
    id: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDomainMetadataUri(
    id: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDomainRoyaltyAmount(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeFromNormalRegistrar(
    zNSHub_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zNSHub(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addController(controller: string, overrides?: CallOverrides): Promise<void>;

    adminBurnToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    beacon(overrides?: CallOverrides): Promise<string>;

    controllers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    domainController(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainExists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    domainMetadataLockedBy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainRoyaltyAmount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      parentRegistrar_: string,
      rootDomainId_: BigNumberish,
      collectionName: string,
      collectionSymbol: string,
      zNSHub_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isController(account: string, overrides?: CallOverrides): Promise<boolean>;

    isDomainMetadataLocked(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDomainMetadata(
      id: BigNumberish,
      toLock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    minterOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    parentRegistrar(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string, string, BigNumber, BigNumber, string] & {
        minter: string;
        metadataLocked: boolean;
        metadataLockedBy: string;
        controller: string;
        royaltyAmount: BigNumber;
        parentId: BigNumber;
        subdomainContract: string;
      }
    >;

    registerDomain(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDomainAndSend(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerSubdomainContract(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeController(
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rootDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAndLockDomainMetadata(
      id: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDomainMetadataUri(
      id: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDomainRoyaltyAmount(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeFromNormalRegistrar(
      zNSHub_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zNSHub(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ControllerAdded(
      controller?: string | null
    ): TypedEventFilter<[string], { controller: string }>;

    ControllerRemoved(
      controller?: string | null
    ): TypedEventFilter<[string], { controller: string }>;

    DomainCreated(
      id?: BigNumberish | null,
      label?: null,
      labelHash?: BigNumberish | null,
      parent?: BigNumberish | null,
      minter?: null,
      controller?: null,
      metadataUri?: null,
      royaltyAmount?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber
      ],
      {
        id: BigNumber;
        label: string;
        labelHash: BigNumber;
        parent: BigNumber;
        minter: string;
        controller: string;
        metadataUri: string;
        royaltyAmount: BigNumber;
      }
    >;

    MetadataChanged(
      id?: BigNumberish | null,
      uri?: null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; uri: string }>;

    MetadataLockChanged(
      id?: BigNumberish | null,
      locker?: null,
      isLocked?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { id: BigNumber; locker: string; isLocked: boolean }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    RoyaltiesAmountChanged(
      id?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; amount: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminBurnToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    controllers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    domainController(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainMetadataLockedBy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainRoyaltyAmount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      parentRegistrar_: string,
      rootDomainId_: BigNumberish,
      collectionName: string,
      collectionSymbol: string,
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isController(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDomainMetadataLocked(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDomainMetadata(
      id: BigNumberish,
      toLock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minterOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    parentRegistrar(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerDomain(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerDomainAndSend(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerSubdomainContract(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAndLockDomainMetadata(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDomainMetadataUri(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDomainRoyaltyAmount(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeFromNormalRegistrar(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zNSHub(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminBurnToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainController(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainMetadataLockedBy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainRoyaltyAmount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      parentRegistrar_: string,
      rootDomainId_: BigNumberish,
      collectionName: string,
      collectionSymbol: string,
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDomainMetadataLocked(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDomainMetadata(
      id: BigNumberish,
      toLock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minterOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDomain(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerDomainAndSend(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerSubdomainContract(
      parentId: BigNumberish,
      label: string,
      minter: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      locked: boolean,
      sendToUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootDomainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAndLockDomainMetadata(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDomainMetadataUri(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDomainRoyaltyAmount(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeFromNormalRegistrar(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zNSHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
