/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZNSHubInterface extends ethers.utils.Interface {
  functions: {
    "addRegistrar(uint256,address)": FunctionFragment;
    "domainCreated(uint256,string,uint256,uint256,address,address,string,uint256)": FunctionFragment;
    "authorizedRegistrars(address)": FunctionFragment;
    "domainExists(uint256)": FunctionFragment;
    "domainTransferred(address,address,uint256)": FunctionFragment;
    "getRegistrarForDomain(uint256)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "metadataChanged(uint256,string)": FunctionFragment;
    "metadataLockChanged(uint256,address,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "parentOf(uint256)": FunctionFragment;
    "registrarBeacon()": FunctionFragment;
    "royaltiesAmountChanged(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRegistrar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainCreated",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedRegistrars",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainTransferred",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrarForDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataChanged",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataLockChanged",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrarBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesAmountChanged",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedRegistrars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrarForDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataLockChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parentOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrarBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesAmountChanged",
    data: BytesLike
  ): Result;

  events: {};
}

export class ZNSHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZNSHubInterface;

  functions: {
    addRegistrar(
      rootDomainId: BigNumberish,
      registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainCreated(
      id: BigNumberish,
      name: string,
      nameHash: BigNumberish,
      parent: BigNumberish,
      minter: string,
      controller: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizedRegistrars(
      registrar: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    domainExists(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    domainTransferred(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegistrarForDomain(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metadataChanged(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metadataLockChanged(
      id: BigNumberish,
      locker: string,
      isLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    registrarBeacon(overrides?: CallOverrides): Promise<[string]>;

    royaltiesAmountChanged(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRegistrar(
    rootDomainId: BigNumberish,
    registrar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainCreated(
    id: BigNumberish,
    name: string,
    nameHash: BigNumberish,
    parent: BigNumberish,
    minter: string,
    controller: string,
    metadataUri: string,
    royaltyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizedRegistrars(
    registrar: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  domainExists(
    domainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  domainTransferred(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegistrarForDomain(
    domainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isController(
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metadataChanged(
    id: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metadataLockChanged(
    id: BigNumberish,
    locker: string,
    isLocked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(domainId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  registrarBeacon(overrides?: CallOverrides): Promise<string>;

  royaltiesAmountChanged(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRegistrar(
      rootDomainId: BigNumberish,
      registrar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainCreated(
      id: BigNumberish,
      name: string,
      nameHash: BigNumberish,
      parent: BigNumberish,
      minter: string,
      controller: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedRegistrars(
      registrar: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    domainExists(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    domainTransferred(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegistrarForDomain(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isController(
      controller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataChanged(
      id: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    metadataLockChanged(
      id: BigNumberish,
      locker: string,
      isLocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(domainId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registrarBeacon(overrides?: CallOverrides): Promise<string>;

    royaltiesAmountChanged(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addRegistrar(
      rootDomainId: BigNumberish,
      registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainCreated(
      id: BigNumberish,
      name: string,
      nameHash: BigNumberish,
      parent: BigNumberish,
      minter: string,
      controller: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizedRegistrars(
      registrar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainExists(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainTransferred(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegistrarForDomain(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metadataChanged(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metadataLockChanged(
      id: BigNumberish,
      locker: string,
      isLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registrarBeacon(overrides?: CallOverrides): Promise<BigNumber>;

    royaltiesAmountChanged(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRegistrar(
      rootDomainId: BigNumberish,
      registrar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainCreated(
      id: BigNumberish,
      name: string,
      nameHash: BigNumberish,
      parent: BigNumberish,
      minter: string,
      controller: string,
      metadataUri: string,
      royaltyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizedRegistrars(
      registrar: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainExists(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainTransferred(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegistrarForDomain(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metadataChanged(
      id: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metadataLockChanged(
      id: BigNumberish,
      locker: string,
      isLocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrarBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltiesAmountChanged(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
